import { inject, Injectable, Injector } from '@angular/core';
import { firstValueFrom, take } from 'rxjs';
import { Appointment } from '../models/appointment.model';
import { AuthService } from './auth.service';
import { addDoc, Firestore } from '@angular/fire/firestore';
import { collection, doc, getDoc, updateDoc } from 'firebase/firestore';
import { AppUser } from '../models/user.model';

@Injectable({
  providedIn: 'root',
})
export class AppointmentService {
  private readonly appointmentCollection;
  private readonly userCollection;

  constructor(private authservice: AuthService, private firestore: Firestore) {
    this.firestore = inject(Firestore);
    this.appointmentCollection = collection(this.firestore, 'Appointments');
    this.userCollection = collection(this.firestore, 'Users');
  }

  /**
   * adds appointment to firestore and updates the user's appointments
   * throws an error if the user is not logged in or is not a seller
   * id is random and is generated by firestore
   * @param appointment appointment to add
   * @returns promise that resolves to the added appointment
   */
  async addAppointment(
    appointment: Omit<Appointment, 'owner'>
  ): Promise<Appointment> {
    try {
      const userData = await firstValueFrom(
        this.authservice.getCurrentUserData$().pipe(take(1))
      );

      if (!userData) {
        throw new Error('Felhasználó nincs bejelentkezve');
      }

      const newAppointment = {
        ...appointment,
        owner: userData.uid,
      };

      const appointmentDocRef = await addDoc(
        this.appointmentCollection,
        newAppointment
      );
      const appointmentId = appointmentDocRef.id;

      updateDoc(appointmentDocRef, { id: appointmentId });

      const savedAppointment: Appointment = {
        ...newAppointment,
        id: appointmentId,
      };

      const userDocRef = doc(this.userCollection, userData.uid);
      const userDoc = await getDoc(userDocRef);

      if (userDoc.exists()) {
        const userData = userDoc.data() as AppUser;
        const appointments = userData.appointments || [];
        appointments.push(appointmentId);
        await updateDoc(userDocRef, { appointments });
      }

      return savedAppointment;
    } catch (error) {
      console.error('Error in appointment addition process:', error);
      throw error;
    }
  }
}
