import { inject, Injectable } from '@angular/core';
import { User } from '@angular/fire/auth';
import {
  catchError,
  first,
  firstValueFrom,
  from,
  map,
  Observable,
  of,
  switchMap,
} from 'rxjs';
import {
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  signOut,
  UserCredential,
} from 'firebase/auth';
import { Auth, authState, deleteUser } from '@angular/fire/auth';
import { Router } from '@angular/router';
import { AppUser } from '../models/user.model';
import { doc, getDoc, setDoc } from 'firebase/firestore';
import { collection } from 'firebase/firestore';
import { deleteDoc, Firestore, updateDoc } from '@angular/fire/firestore';

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private currentUser$: Observable<User | null>;
  private firestore = inject(Firestore);
  private usersCollection = collection(this.firestore, 'Users');

  constructor(private auth: Auth, private router: Router) {
    this.currentUser$ = authState(this.auth);
  }

  /**
   * signs in with email and password and returns the firebase auth user object
   * @param email email string
   * @param password password string
   * @returns
   */
  async login(email: string, password: string): Promise<UserCredential> {
    return await signInWithEmailAndPassword(this.auth, email, password);
  }

  /**
   * logs out with firebase auth
   * @returns if the logout was successful
   */
  logout() {
    return signOut(this.auth).then(() => {
      this.router.navigateByUrl('/');
    });
  }

  /**
   * registers with supplied email, password, first name, last name and role, stores the user data in firestore and returns the firebase auth user object
   * throws an error if the registration fails
   * profile picture is set to default.jpg
   * @param email
   * @param password
   * @param firstName
   * @param lastName
   * @param role 'buyer' | 'seller'
   * @returns a promise that resolves to the firebase auth user object
   */
  async register(
    email: string,
    password: string,
    firstName: string,
    lastName: string,
    role: 'buyer' | 'seller'
  ): Promise<UserCredential> {
    try {
      const userCredential = await createUserWithEmailAndPassword(
        this.auth,
        email,
        password
      );

      this.createUserDocument(userCredential.user.uid, {
        uid: userCredential.user.uid,
        email: email,
        name: {
          first: firstName,
          last: lastName,
        },
        role: role,
        savedProperties: [],
        appointments: [],
        profilePicture: 'default.jpg',
      });

      return userCredential;
    } catch (error) {
      //console.log(error);
      throw error;
    }
  }

  /**
   * @returns an observable that emits the !firebase auth! user object
   */
  getCurrentUser(): Observable<User | null> {
    return this.currentUser$;
  }

  /**
   * @returns an observable that emits the user data from !firestore!
   */
  getCurrentUserData$(): Observable<AppUser | null> {
    return this.currentUser$.pipe(
      switchMap((user) => {
        if (!user) return of(null);

        return from(getDoc(doc(this.firestore, 'Users', user.uid))).pipe(
          map((userDoc) => {
            if (!userDoc.exists()) return null;

            return {
              uid: user.uid,
              email: user.email || '',
              ...userDoc.data(),
            } as AppUser;
          }),
          catchError((error) => {
            console.error('Error:', error);
            return of(null);
          })
        );
      })
    );
  }

  /**
   * @returns if the user is authenticated with firebase auth
   */
  isAuthenticated(): Observable<User | null> {
    return this.currentUser$;
  }

  /**
   * sets the user data in firestore with the supplied user object
   * @param uid user id string (usually generated by firebase)
   * @param user appuser object
   * @returns a promise that resolves to void
   */
  private async createUserDocument(
    uid: string,
    user: Partial<AppUser>
  ): Promise<void> {
    const userRef = doc(collection(this.firestore, 'Users'), uid);
    return await setDoc(userRef, user);
  }

  async updateUser(userData: Partial<AppUser>): Promise<void> {
    try {
      const user = await firstValueFrom(this.getCurrentUser().pipe(first()));
      if (!user) throw new Error('Felhasználó nincs bejelentkezve');
      const userDocRef = doc(this.usersCollection, user.uid);
      const userDoc = await getDoc(userDocRef);
      if (!userDoc.exists()) throw new Error('Felhasználó nincs bejelentkezve');
      const userDataToUpdate = {
        ...userDoc.data(),
      } as AppUser;

      const updatedUserData = {
        ...userDataToUpdate,
        ...userData,
      };

      return await updateDoc(userDocRef, updatedUserData);
    } catch (error) {
      console.error('Error in updateUser:', error);
      throw error;
    }
  }

  async deleteUser(): Promise<void> {
    try {
      const user = await firstValueFrom(this.getCurrentUser().pipe(first()));
      if (!user) throw new Error('Felhasználó nincs bejelentkezve');

      const userDocRef = doc(this.usersCollection, user.uid);
      await deleteDoc(userDocRef);

      await deleteUser(user);

      this.router.navigateByUrl('/');
    } catch (error: any) {
      console.error('Error in deleteUser:', error);
      throw error;
    }
  }
}
